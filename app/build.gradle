apply plugin: 'com.android.application'

def globalConf = rootProject.ext

android {
    compileSdkVersion globalConf.androidTargetSdkVersion
    buildToolsVersion globalConf.androidBuildToolsVersion
    defaultConfig {
        minSdkVersion globalConf.androidMinSdkVersion
        targetSdkVersion globalConf.androidTargetSdkVersion
        versionCode globalConf.versionCode
        versionName globalConf.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    productFlavors {
        stage {
            applicationId globalConf.androidApplicationIdStage
            buildConfigField("String", "BASE_URL", "\"http://www.mocky.io/v2\"")
            buildConfigField("String", "API_KEY", "\"ABCXYZ123TEST\"")
        }
        production {
            applicationId globalConf.androidApplicationIdProduction
            buildConfigField("String", "BASE_URL", "\"http://www.mocky.io/v2\"")
            buildConfigField("String", "API_KEY", "\"ABCXYZ123TEST\"")
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            testCoverageEnabled true
            debuggable true
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debuggable.initWith(buildTypes.debug)
        debuggable {
            testCoverageEnabled = false
        }
    }
    sourceSets {
        debuggable {
            res.srcDirs = ['src/debug/res']
            java.srcDirs = ['src/debug/java']
        }
    }
}

dependencies {
    Map<String, String> dependencies = globalConf.dependencies;

    androidTestCompile(dependencies.espressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile dependencies.appCompat
    compile dependencies.vectorDrawable
    testCompile dependencies.junit
}
